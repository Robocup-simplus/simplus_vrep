// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simplus.proto

#include "simplus.pb.h"
#include "simplus.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace SimPlus {

static const char* SimPlus_method_names[] = {
  "/SimPlus.SimPlus/Start",
  "/SimPlus.SimPlus/Action",
  "/SimPlus.SimPlus/End",
};

std::unique_ptr< SimPlus::Stub> SimPlus::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SimPlus::Stub> stub(new SimPlus::Stub(channel));
  return stub;
}

SimPlus::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Start_(SimPlus_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Action_(SimPlus_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_End_(SimPlus_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SimPlus::Stub::Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::SimPlus::TeamInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Start_, context, request, response);
}

void SimPlus::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo* request, ::SimPlus::TeamInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void SimPlus::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::TeamInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void SimPlus::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo* request, ::SimPlus::TeamInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

void SimPlus::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::TeamInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SimPlus::TeamInfo>* SimPlus::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimPlus::TeamInfo>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SimPlus::TeamInfo>* SimPlus::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimPlus::TeamInfo>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, false);
}

::grpc::Status SimPlus::Stub::Action(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::SimPlus::Commands* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Action_, context, request, response);
}

void SimPlus::Stub::experimental_async::Action(::grpc::ClientContext* context, const ::SimPlus::Observations* request, ::SimPlus::Commands* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Action_, context, request, response, std::move(f));
}

void SimPlus::Stub::experimental_async::Action(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Commands* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Action_, context, request, response, std::move(f));
}

void SimPlus::Stub::experimental_async::Action(::grpc::ClientContext* context, const ::SimPlus::Observations* request, ::SimPlus::Commands* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Action_, context, request, response, reactor);
}

void SimPlus::Stub::experimental_async::Action(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Commands* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Action_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SimPlus::Commands>* SimPlus::Stub::AsyncActionRaw(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimPlus::Commands>::Create(channel_.get(), cq, rpcmethod_Action_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SimPlus::Commands>* SimPlus::Stub::PrepareAsyncActionRaw(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimPlus::Commands>::Create(channel_.get(), cq, rpcmethod_Action_, context, request, false);
}

::grpc::Status SimPlus::Stub::End(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::SimPlus::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_End_, context, request, response);
}

void SimPlus::Stub::experimental_async::End(::grpc::ClientContext* context, const ::SimPlus::Ending* request, ::SimPlus::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_End_, context, request, response, std::move(f));
}

void SimPlus::Stub::experimental_async::End(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_End_, context, request, response, std::move(f));
}

void SimPlus::Stub::experimental_async::End(::grpc::ClientContext* context, const ::SimPlus::Ending* request, ::SimPlus::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_End_, context, request, response, reactor);
}

void SimPlus::Stub::experimental_async::End(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_End_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SimPlus::Result>* SimPlus::Stub::AsyncEndRaw(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimPlus::Result>::Create(channel_.get(), cq, rpcmethod_End_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SimPlus::Result>* SimPlus::Stub::PrepareAsyncEndRaw(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimPlus::Result>::Create(channel_.get(), cq, rpcmethod_End_, context, request, false);
}

SimPlus::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimPlus_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimPlus::Service, ::SimPlus::WorldInfo, ::SimPlus::TeamInfo>(
          std::mem_fn(&SimPlus::Service::Start), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimPlus_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimPlus::Service, ::SimPlus::Observations, ::SimPlus::Commands>(
          std::mem_fn(&SimPlus::Service::Action), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimPlus_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimPlus::Service, ::SimPlus::Ending, ::SimPlus::Result>(
          std::mem_fn(&SimPlus::Service::End), this)));
}

SimPlus::Service::~Service() {
}

::grpc::Status SimPlus::Service::Start(::grpc::ServerContext* context, const ::SimPlus::WorldInfo* request, ::SimPlus::TeamInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimPlus::Service::Action(::grpc::ServerContext* context, const ::SimPlus::Observations* request, ::SimPlus::Commands* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimPlus::Service::End(::grpc::ServerContext* context, const ::SimPlus::Ending* request, ::SimPlus::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace SimPlus

