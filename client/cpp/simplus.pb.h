// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simplus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simplus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simplus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simplus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_simplus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simplus_2eproto;
namespace SimPlus {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class CheckPoint;
class CheckPointDefaultTypeInternal;
extern CheckPointDefaultTypeInternal _CheckPoint_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Commands;
class CommandsDefaultTypeInternal;
extern CommandsDefaultTypeInternal _Commands_default_instance_;
class Ending;
class EndingDefaultTypeInternal;
extern EndingDefaultTypeInternal _Ending_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Observation;
class ObservationDefaultTypeInternal;
extern ObservationDefaultTypeInternal _Observation_default_instance_;
class Observations;
class ObservationsDefaultTypeInternal;
extern ObservationsDefaultTypeInternal _Observations_default_instance_;
class Pixel;
class PixelDefaultTypeInternal;
extern PixelDefaultTypeInternal _Pixel_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Proximity;
class ProximityDefaultTypeInternal;
extern ProximityDefaultTypeInternal _Proximity_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class TeamInfo;
class TeamInfoDefaultTypeInternal;
extern TeamInfoDefaultTypeInternal _TeamInfo_default_instance_;
class WorldInfo;
class WorldInfoDefaultTypeInternal;
extern WorldInfoDefaultTypeInternal _WorldInfo_default_instance_;
}  // namespace SimPlus
PROTOBUF_NAMESPACE_OPEN
template<> ::SimPlus::Action* Arena::CreateMaybeMessage<::SimPlus::Action>(Arena*);
template<> ::SimPlus::CheckPoint* Arena::CreateMaybeMessage<::SimPlus::CheckPoint>(Arena*);
template<> ::SimPlus::Command* Arena::CreateMaybeMessage<::SimPlus::Command>(Arena*);
template<> ::SimPlus::Commands* Arena::CreateMaybeMessage<::SimPlus::Commands>(Arena*);
template<> ::SimPlus::Ending* Arena::CreateMaybeMessage<::SimPlus::Ending>(Arena*);
template<> ::SimPlus::Image* Arena::CreateMaybeMessage<::SimPlus::Image>(Arena*);
template<> ::SimPlus::Observation* Arena::CreateMaybeMessage<::SimPlus::Observation>(Arena*);
template<> ::SimPlus::Observations* Arena::CreateMaybeMessage<::SimPlus::Observations>(Arena*);
template<> ::SimPlus::Pixel* Arena::CreateMaybeMessage<::SimPlus::Pixel>(Arena*);
template<> ::SimPlus::Position* Arena::CreateMaybeMessage<::SimPlus::Position>(Arena*);
template<> ::SimPlus::Proximity* Arena::CreateMaybeMessage<::SimPlus::Proximity>(Arena*);
template<> ::SimPlus::Result* Arena::CreateMaybeMessage<::SimPlus::Result>(Arena*);
template<> ::SimPlus::ServerInfo* Arena::CreateMaybeMessage<::SimPlus::ServerInfo>(Arena*);
template<> ::SimPlus::TeamInfo* Arena::CreateMaybeMessage<::SimPlus::TeamInfo>(Arena*);
template<> ::SimPlus::WorldInfo* Arena::CreateMaybeMessage<::SimPlus::WorldInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SimPlus {

// ===================================================================

class WorldInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.WorldInfo) */ {
 public:
  WorldInfo();
  virtual ~WorldInfo();

  WorldInfo(const WorldInfo& from);
  WorldInfo(WorldInfo&& from) noexcept
    : WorldInfo() {
    *this = ::std::move(from);
  }

  inline WorldInfo& operator=(const WorldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldInfo& operator=(WorldInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldInfo* internal_default_instance() {
    return reinterpret_cast<const WorldInfo*>(
               &_WorldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorldInfo& a, WorldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldInfo* New() const final {
    return CreateMaybeMessage<WorldInfo>(nullptr);
  }

  WorldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldInfo& from);
  void MergeFrom(const WorldInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.WorldInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckPointsFieldNumber = 5,
    kTeamSizeFieldNumber = 1,
    kRobotPerTeamFieldNumber = 2,
    kColorSensorSizeFieldNumber = 3,
    kProximitySensorSizeFieldNumber = 4,
  };
  // repeated .SimPlus.CheckPoint check_points = 5;
  int check_points_size() const;
  private:
  int _internal_check_points_size() const;
  public:
  void clear_check_points();
  ::SimPlus::CheckPoint* mutable_check_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::CheckPoint >*
      mutable_check_points();
  private:
  const ::SimPlus::CheckPoint& _internal_check_points(int index) const;
  ::SimPlus::CheckPoint* _internal_add_check_points();
  public:
  const ::SimPlus::CheckPoint& check_points(int index) const;
  ::SimPlus::CheckPoint* add_check_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::CheckPoint >&
      check_points() const;

  // int32 team_size = 1;
  void clear_team_size();
  ::PROTOBUF_NAMESPACE_ID::int32 team_size() const;
  void set_team_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_size() const;
  void _internal_set_team_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 robot_per_team = 2;
  void clear_robot_per_team();
  ::PROTOBUF_NAMESPACE_ID::int32 robot_per_team() const;
  void set_robot_per_team(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robot_per_team() const;
  void _internal_set_robot_per_team(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 color_sensor_size = 3;
  void clear_color_sensor_size();
  ::PROTOBUF_NAMESPACE_ID::int32 color_sensor_size() const;
  void set_color_sensor_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color_sensor_size() const;
  void _internal_set_color_sensor_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 proximity_sensor_size = 4;
  void clear_proximity_sensor_size();
  ::PROTOBUF_NAMESPACE_ID::int32 proximity_sensor_size() const;
  void set_proximity_sensor_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proximity_sensor_size() const;
  void _internal_set_proximity_sensor_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.WorldInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::CheckPoint > check_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 robot_per_team_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_sensor_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 proximity_sensor_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(nullptr);
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.ServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerStateFieldNumber = 2,
    kTimeFieldNumber = 1,
    kMyScoreFieldNumber = 3,
    kOppScoreFieldNumber = 4,
  };
  // string server_state = 2;
  void clear_server_state();
  const std::string& server_state() const;
  void set_server_state(const std::string& value);
  void set_server_state(std::string&& value);
  void set_server_state(const char* value);
  void set_server_state(const char* value, size_t size);
  std::string* mutable_server_state();
  std::string* release_server_state();
  void set_allocated_server_state(std::string* server_state);
  private:
  const std::string& _internal_server_state() const;
  void _internal_set_server_state(const std::string& value);
  std::string* _internal_mutable_server_state();
  public:

  // uint32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 my_score = 3;
  void clear_my_score();
  ::PROTOBUF_NAMESPACE_ID::int32 my_score() const;
  void set_my_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_my_score() const;
  void _internal_set_my_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 opp_score = 4;
  void clear_opp_score();
  ::PROTOBUF_NAMESPACE_ID::int32 opp_score() const;
  void set_opp_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opp_score() const;
  void _internal_set_opp_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.ServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 my_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 opp_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class TeamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.TeamInfo) */ {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);
  TeamInfo(TeamInfo&& from) noexcept
    : TeamInfo() {
    *this = ::std::move(from);
  }

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamInfo& operator=(TeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamInfo* internal_default_instance() {
    return reinterpret_cast<const TeamInfo*>(
               &_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TeamInfo& a, TeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamInfo* New() const final {
    return CreateMaybeMessage<TeamInfo>(nullptr);
  }

  TeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.TeamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.TeamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Observations :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Observations) */ {
 public:
  Observations();
  virtual ~Observations();

  Observations(const Observations& from);
  Observations(Observations&& from) noexcept
    : Observations() {
    *this = ::std::move(from);
  }

  inline Observations& operator=(const Observations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Observations& operator=(Observations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Observations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Observations* internal_default_instance() {
    return reinterpret_cast<const Observations*>(
               &_Observations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Observations& a, Observations& b) {
    a.Swap(&b);
  }
  inline void Swap(Observations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Observations* New() const final {
    return CreateMaybeMessage<Observations>(nullptr);
  }

  Observations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Observations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Observations& from);
  void MergeFrom(const Observations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Observations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Observations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotsFieldNumber = 2,
    kServerFieldNumber = 1,
  };
  // repeated .SimPlus.Observation robots = 2;
  int robots_size() const;
  private:
  int _internal_robots_size() const;
  public:
  void clear_robots();
  ::SimPlus::Observation* mutable_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Observation >*
      mutable_robots();
  private:
  const ::SimPlus::Observation& _internal_robots(int index) const;
  ::SimPlus::Observation* _internal_add_robots();
  public:
  const ::SimPlus::Observation& robots(int index) const;
  ::SimPlus::Observation* add_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Observation >&
      robots() const;

  // .SimPlus.ServerInfo server = 1;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::SimPlus::ServerInfo& server() const;
  ::SimPlus::ServerInfo* release_server();
  ::SimPlus::ServerInfo* mutable_server();
  void set_allocated_server(::SimPlus::ServerInfo* server);
  private:
  const ::SimPlus::ServerInfo& _internal_server() const;
  ::SimPlus::ServerInfo* _internal_mutable_server();
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Observations)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Observation > robots_;
  ::SimPlus::ServerInfo* server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Observation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Observation) */ {
 public:
  Observation();
  virtual ~Observation();

  Observation(const Observation& from);
  Observation(Observation&& from) noexcept
    : Observation() {
    *this = ::std::move(from);
  }

  inline Observation& operator=(const Observation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Observation& operator=(Observation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Observation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Observation* internal_default_instance() {
    return reinterpret_cast<const Observation*>(
               &_Observation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Observation& a, Observation& b) {
    a.Swap(&b);
  }
  inline void Swap(Observation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Observation* New() const final {
    return CreateMaybeMessage<Observation>(nullptr);
  }

  Observation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Observation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Observation& from);
  void MergeFrom(const Observation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Observation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Observation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorsFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kCameraFieldNumber = 1,
    kPosFieldNumber = 4,
  };
  // repeated .SimPlus.Pixel colors = 2;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  ::SimPlus::Pixel* mutable_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Pixel >*
      mutable_colors();
  private:
  const ::SimPlus::Pixel& _internal_colors(int index) const;
  ::SimPlus::Pixel* _internal_add_colors();
  public:
  const ::SimPlus::Pixel& colors(int index) const;
  ::SimPlus::Pixel* add_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Pixel >&
      colors() const;

  // repeated .SimPlus.Proximity distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::SimPlus::Proximity* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Proximity >*
      mutable_distances();
  private:
  const ::SimPlus::Proximity& _internal_distances(int index) const;
  ::SimPlus::Proximity* _internal_add_distances();
  public:
  const ::SimPlus::Proximity& distances(int index) const;
  ::SimPlus::Proximity* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Proximity >&
      distances() const;

  // .SimPlus.Image camera = 1;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::SimPlus::Image& camera() const;
  ::SimPlus::Image* release_camera();
  ::SimPlus::Image* mutable_camera();
  void set_allocated_camera(::SimPlus::Image* camera);
  private:
  const ::SimPlus::Image& _internal_camera() const;
  ::SimPlus::Image* _internal_mutable_camera();
  public:

  // .SimPlus.Position pos = 4;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::SimPlus::Position& pos() const;
  ::SimPlus::Position* release_pos();
  ::SimPlus::Position* mutable_pos();
  void set_allocated_pos(::SimPlus::Position* pos);
  private:
  const ::SimPlus::Position& _internal_pos() const;
  ::SimPlus::Position* _internal_mutable_pos();
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Observation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Pixel > colors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Proximity > distances_;
  ::SimPlus::Image* camera_;
  ::SimPlus::Position* pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Proximity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Proximity) */ {
 public:
  Proximity();
  virtual ~Proximity();

  Proximity(const Proximity& from);
  Proximity(Proximity&& from) noexcept
    : Proximity() {
    *this = ::std::move(from);
  }

  inline Proximity& operator=(const Proximity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proximity& operator=(Proximity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proximity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proximity* internal_default_instance() {
    return reinterpret_cast<const Proximity*>(
               &_Proximity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Proximity& a, Proximity& b) {
    a.Swap(&b);
  }
  inline void Swap(Proximity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proximity* New() const final {
    return CreateMaybeMessage<Proximity>(nullptr);
  }

  Proximity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proximity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proximity& from);
  void MergeFrom(const Proximity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proximity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Proximity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 2,
    kDetectedFieldNumber = 1,
  };
  // double distance = 2;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // bool detected = 1;
  void clear_detected();
  bool detected() const;
  void set_detected(bool value);
  private:
  bool _internal_detected() const;
  void _internal_set_detected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Proximity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double distance_;
  bool detected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRollFieldNumber = 4,
    kPitchFieldNumber = 5,
    kYawFieldNumber = 6,
    kGpsEnabledFieldNumber = 7,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double roll = 4;
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double pitch = 5;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double yaw = 6;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // bool gps_enabled = 7;
  void clear_gps_enabled();
  bool gps_enabled() const;
  void set_gps_enabled(bool value);
  private:
  bool _internal_gps_enabled() const;
  void _internal_set_gps_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double roll_;
  double pitch_;
  double yaw_;
  bool gps_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Commands :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Commands) */ {
 public:
  Commands();
  virtual ~Commands();

  Commands(const Commands& from);
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commands& operator=(Commands&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(Commands* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return CreateMaybeMessage<Commands>(nullptr);
  }

  Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Commands";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 1,
  };
  // repeated .SimPlus.Command commands = 1;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::SimPlus::Command* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Command >*
      mutable_commands();
  private:
  const ::SimPlus::Command& _internal_commands(int index) const;
  ::SimPlus::Command* _internal_add_commands();
  public:
  const ::SimPlus::Command& commands(int index) const;
  ::SimPlus::Command* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Command >&
      commands() const;

  // @@protoc_insertion_point(class_scope:SimPlus.Commands)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Command > commands_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 5,
    kLEDFieldNumber = 4,
    kLinearFieldNumber = 2,
    kAngularFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .SimPlus.Action actions = 5;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::SimPlus::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Action >*
      mutable_actions();
  private:
  const ::SimPlus::Action& _internal_actions(int index) const;
  ::SimPlus::Action* _internal_add_actions();
  public:
  const ::SimPlus::Action& actions(int index) const;
  ::SimPlus::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Action >&
      actions() const;

  // string LED = 4;
  void clear_led();
  const std::string& led() const;
  void set_led(const std::string& value);
  void set_led(std::string&& value);
  void set_led(const char* value);
  void set_led(const char* value, size_t size);
  std::string* mutable_led();
  std::string* release_led();
  void set_allocated_led(std::string* led);
  private:
  const std::string& _internal_led() const;
  void _internal_set_led(const std::string& value);
  std::string* _internal_mutable_led();
  public:

  // double linear = 2;
  void clear_linear();
  double linear() const;
  void set_linear(double value);
  private:
  double _internal_linear() const;
  void _internal_set_linear(double value);
  public:

  // double angular = 3;
  void clear_angular();
  double angular() const;
  void set_angular(double value);
  private:
  double _internal_angular() const;
  void _internal_set_angular(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Command)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr led_;
  double linear_;
  double angular_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Ending :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Ending) */ {
 public:
  Ending();
  virtual ~Ending();

  Ending(const Ending& from);
  Ending(Ending&& from) noexcept
    : Ending() {
    *this = ::std::move(from);
  }

  inline Ending& operator=(const Ending& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ending& operator=(Ending&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ending& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ending* internal_default_instance() {
    return reinterpret_cast<const Ending*>(
               &_Ending_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Ending& a, Ending& b) {
    a.Swap(&b);
  }
  inline void Swap(Ending* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ending* New() const final {
    return CreateMaybeMessage<Ending>(nullptr);
  }

  Ending* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ending>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ending& from);
  void MergeFrom(const Ending& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ending* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Ending";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
  };
  // .SimPlus.ServerInfo server = 1;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::SimPlus::ServerInfo& server() const;
  ::SimPlus::ServerInfo* release_server();
  ::SimPlus::ServerInfo* mutable_server();
  void set_allocated_server(::SimPlus::ServerInfo* server);
  private:
  const ::SimPlus::ServerInfo& _internal_server() const;
  ::SimPlus::ServerInfo* _internal_mutable_server();
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Ending)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::SimPlus::ServerInfo* server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kMapFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .SimPlus.Image map = 1;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::SimPlus::Image& map() const;
  ::SimPlus::Image* release_map();
  ::SimPlus::Image* mutable_map();
  void set_allocated_map(::SimPlus::Image* map);
  private:
  const ::SimPlus::Image& _internal_map() const;
  ::SimPlus::Image* _internal_mutable_map();
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Result)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::SimPlus::Image* map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Action :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Action";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 4,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Action)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class CheckPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.CheckPoint) */ {
 public:
  CheckPoint();
  virtual ~CheckPoint();

  CheckPoint(const CheckPoint& from);
  CheckPoint(CheckPoint&& from) noexcept
    : CheckPoint() {
    *this = ::std::move(from);
  }

  inline CheckPoint& operator=(const CheckPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckPoint& operator=(CheckPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckPoint* internal_default_instance() {
    return reinterpret_cast<const CheckPoint*>(
               &_CheckPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CheckPoint& a, CheckPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckPoint* New() const final {
    return CreateMaybeMessage<CheckPoint>(nullptr);
  }

  CheckPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckPoint& from);
  void MergeFrom(const CheckPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.CheckPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // string color = 1;
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // int32 point = 2;
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::int32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.CheckPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::int32 point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Pixel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Pixel) */ {
 public:
  Pixel();
  virtual ~Pixel();

  Pixel(const Pixel& from);
  Pixel(Pixel&& from) noexcept
    : Pixel() {
    *this = ::std::move(from);
  }

  inline Pixel& operator=(const Pixel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pixel& operator=(Pixel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pixel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pixel* internal_default_instance() {
    return reinterpret_cast<const Pixel*>(
               &_Pixel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Pixel& a, Pixel& b) {
    a.Swap(&b);
  }
  inline void Swap(Pixel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pixel* New() const final {
    return CreateMaybeMessage<Pixel>(nullptr);
  }

  Pixel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pixel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pixel& from);
  void MergeFrom(const Pixel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pixel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Pixel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // int32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Pixel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// -------------------------------------------------------------------

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimPlus.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimPlus.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simplus_2eproto);
    return ::descriptor_table_simplus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 3,
    kWFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // bytes raw = 3;
  void clear_raw();
  const std::string& raw() const;
  void set_raw(const std::string& value);
  void set_raw(std::string&& value);
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  std::string* mutable_raw();
  std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  // int32 w = 1;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 h = 2;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SimPlus.Image)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simplus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorldInfo

// int32 team_size = 1;
inline void WorldInfo::clear_team_size() {
  team_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldInfo::_internal_team_size() const {
  return team_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldInfo::team_size() const {
  // @@protoc_insertion_point(field_get:SimPlus.WorldInfo.team_size)
  return _internal_team_size();
}
inline void WorldInfo::_internal_set_team_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_size_ = value;
}
inline void WorldInfo::set_team_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_size(value);
  // @@protoc_insertion_point(field_set:SimPlus.WorldInfo.team_size)
}

// int32 robot_per_team = 2;
inline void WorldInfo::clear_robot_per_team() {
  robot_per_team_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldInfo::_internal_robot_per_team() const {
  return robot_per_team_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldInfo::robot_per_team() const {
  // @@protoc_insertion_point(field_get:SimPlus.WorldInfo.robot_per_team)
  return _internal_robot_per_team();
}
inline void WorldInfo::_internal_set_robot_per_team(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  robot_per_team_ = value;
}
inline void WorldInfo::set_robot_per_team(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_robot_per_team(value);
  // @@protoc_insertion_point(field_set:SimPlus.WorldInfo.robot_per_team)
}

// int32 color_sensor_size = 3;
inline void WorldInfo::clear_color_sensor_size() {
  color_sensor_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldInfo::_internal_color_sensor_size() const {
  return color_sensor_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldInfo::color_sensor_size() const {
  // @@protoc_insertion_point(field_get:SimPlus.WorldInfo.color_sensor_size)
  return _internal_color_sensor_size();
}
inline void WorldInfo::_internal_set_color_sensor_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_sensor_size_ = value;
}
inline void WorldInfo::set_color_sensor_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color_sensor_size(value);
  // @@protoc_insertion_point(field_set:SimPlus.WorldInfo.color_sensor_size)
}

// int32 proximity_sensor_size = 4;
inline void WorldInfo::clear_proximity_sensor_size() {
  proximity_sensor_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldInfo::_internal_proximity_sensor_size() const {
  return proximity_sensor_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldInfo::proximity_sensor_size() const {
  // @@protoc_insertion_point(field_get:SimPlus.WorldInfo.proximity_sensor_size)
  return _internal_proximity_sensor_size();
}
inline void WorldInfo::_internal_set_proximity_sensor_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proximity_sensor_size_ = value;
}
inline void WorldInfo::set_proximity_sensor_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proximity_sensor_size(value);
  // @@protoc_insertion_point(field_set:SimPlus.WorldInfo.proximity_sensor_size)
}

// repeated .SimPlus.CheckPoint check_points = 5;
inline int WorldInfo::_internal_check_points_size() const {
  return check_points_.size();
}
inline int WorldInfo::check_points_size() const {
  return _internal_check_points_size();
}
inline void WorldInfo::clear_check_points() {
  check_points_.Clear();
}
inline ::SimPlus::CheckPoint* WorldInfo::mutable_check_points(int index) {
  // @@protoc_insertion_point(field_mutable:SimPlus.WorldInfo.check_points)
  return check_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::CheckPoint >*
WorldInfo::mutable_check_points() {
  // @@protoc_insertion_point(field_mutable_list:SimPlus.WorldInfo.check_points)
  return &check_points_;
}
inline const ::SimPlus::CheckPoint& WorldInfo::_internal_check_points(int index) const {
  return check_points_.Get(index);
}
inline const ::SimPlus::CheckPoint& WorldInfo::check_points(int index) const {
  // @@protoc_insertion_point(field_get:SimPlus.WorldInfo.check_points)
  return _internal_check_points(index);
}
inline ::SimPlus::CheckPoint* WorldInfo::_internal_add_check_points() {
  return check_points_.Add();
}
inline ::SimPlus::CheckPoint* WorldInfo::add_check_points() {
  // @@protoc_insertion_point(field_add:SimPlus.WorldInfo.check_points)
  return _internal_add_check_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::CheckPoint >&
WorldInfo::check_points() const {
  // @@protoc_insertion_point(field_list:SimPlus.WorldInfo.check_points)
  return check_points_;
}

// -------------------------------------------------------------------

// ServerInfo

// uint32 time = 1;
inline void ServerInfo::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::time() const {
  // @@protoc_insertion_point(field_get:SimPlus.ServerInfo.time)
  return _internal_time();
}
inline void ServerInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void ServerInfo::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:SimPlus.ServerInfo.time)
}

// string server_state = 2;
inline void ServerInfo::clear_server_state() {
  server_state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfo::server_state() const {
  // @@protoc_insertion_point(field_get:SimPlus.ServerInfo.server_state)
  return _internal_server_state();
}
inline void ServerInfo::set_server_state(const std::string& value) {
  _internal_set_server_state(value);
  // @@protoc_insertion_point(field_set:SimPlus.ServerInfo.server_state)
}
inline std::string* ServerInfo::mutable_server_state() {
  // @@protoc_insertion_point(field_mutable:SimPlus.ServerInfo.server_state)
  return _internal_mutable_server_state();
}
inline const std::string& ServerInfo::_internal_server_state() const {
  return server_state_.GetNoArena();
}
inline void ServerInfo::_internal_set_server_state(const std::string& value) {
  
  server_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerInfo::set_server_state(std::string&& value) {
  
  server_state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SimPlus.ServerInfo.server_state)
}
inline void ServerInfo::set_server_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimPlus.ServerInfo.server_state)
}
inline void ServerInfo::set_server_state(const char* value, size_t size) {
  
  server_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimPlus.ServerInfo.server_state)
}
inline std::string* ServerInfo::_internal_mutable_server_state() {
  
  return server_state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfo::release_server_state() {
  // @@protoc_insertion_point(field_release:SimPlus.ServerInfo.server_state)
  
  return server_state_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_server_state(std::string* server_state) {
  if (server_state != nullptr) {
    
  } else {
    
  }
  server_state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_state);
  // @@protoc_insertion_point(field_set_allocated:SimPlus.ServerInfo.server_state)
}

// int32 my_score = 3;
inline void ServerInfo::clear_my_score() {
  my_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::_internal_my_score() const {
  return my_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::my_score() const {
  // @@protoc_insertion_point(field_get:SimPlus.ServerInfo.my_score)
  return _internal_my_score();
}
inline void ServerInfo::_internal_set_my_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  my_score_ = value;
}
inline void ServerInfo::set_my_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_my_score(value);
  // @@protoc_insertion_point(field_set:SimPlus.ServerInfo.my_score)
}

// int32 opp_score = 4;
inline void ServerInfo::clear_opp_score() {
  opp_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::_internal_opp_score() const {
  return opp_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::opp_score() const {
  // @@protoc_insertion_point(field_get:SimPlus.ServerInfo.opp_score)
  return _internal_opp_score();
}
inline void ServerInfo::_internal_set_opp_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opp_score_ = value;
}
inline void ServerInfo::set_opp_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opp_score(value);
  // @@protoc_insertion_point(field_set:SimPlus.ServerInfo.opp_score)
}

// -------------------------------------------------------------------

// TeamInfo

// string name = 1;
inline void TeamInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TeamInfo::name() const {
  // @@protoc_insertion_point(field_get:SimPlus.TeamInfo.name)
  return _internal_name();
}
inline void TeamInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SimPlus.TeamInfo.name)
}
inline std::string* TeamInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SimPlus.TeamInfo.name)
  return _internal_mutable_name();
}
inline const std::string& TeamInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void TeamInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TeamInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SimPlus.TeamInfo.name)
}
inline void TeamInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimPlus.TeamInfo.name)
}
inline void TeamInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimPlus.TeamInfo.name)
}
inline std::string* TeamInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:SimPlus.TeamInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TeamInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SimPlus.TeamInfo.name)
}

// -------------------------------------------------------------------

// Observations

// .SimPlus.ServerInfo server = 1;
inline bool Observations::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool Observations::has_server() const {
  return _internal_has_server();
}
inline void Observations::clear_server() {
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::SimPlus::ServerInfo& Observations::_internal_server() const {
  const ::SimPlus::ServerInfo* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SimPlus::ServerInfo*>(
      &::SimPlus::_ServerInfo_default_instance_);
}
inline const ::SimPlus::ServerInfo& Observations::server() const {
  // @@protoc_insertion_point(field_get:SimPlus.Observations.server)
  return _internal_server();
}
inline ::SimPlus::ServerInfo* Observations::release_server() {
  // @@protoc_insertion_point(field_release:SimPlus.Observations.server)
  
  ::SimPlus::ServerInfo* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::SimPlus::ServerInfo* Observations::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimPlus::ServerInfo>(GetArenaNoVirtual());
    server_ = p;
  }
  return server_;
}
inline ::SimPlus::ServerInfo* Observations::mutable_server() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Observations.server)
  return _internal_mutable_server();
}
inline void Observations::set_allocated_server(::SimPlus::ServerInfo* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Observations.server)
}

// repeated .SimPlus.Observation robots = 2;
inline int Observations::_internal_robots_size() const {
  return robots_.size();
}
inline int Observations::robots_size() const {
  return _internal_robots_size();
}
inline void Observations::clear_robots() {
  robots_.Clear();
}
inline ::SimPlus::Observation* Observations::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:SimPlus.Observations.robots)
  return robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Observation >*
Observations::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:SimPlus.Observations.robots)
  return &robots_;
}
inline const ::SimPlus::Observation& Observations::_internal_robots(int index) const {
  return robots_.Get(index);
}
inline const ::SimPlus::Observation& Observations::robots(int index) const {
  // @@protoc_insertion_point(field_get:SimPlus.Observations.robots)
  return _internal_robots(index);
}
inline ::SimPlus::Observation* Observations::_internal_add_robots() {
  return robots_.Add();
}
inline ::SimPlus::Observation* Observations::add_robots() {
  // @@protoc_insertion_point(field_add:SimPlus.Observations.robots)
  return _internal_add_robots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Observation >&
Observations::robots() const {
  // @@protoc_insertion_point(field_list:SimPlus.Observations.robots)
  return robots_;
}

// -------------------------------------------------------------------

// Observation

// .SimPlus.Image camera = 1;
inline bool Observation::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool Observation::has_camera() const {
  return _internal_has_camera();
}
inline void Observation::clear_camera() {
  if (GetArenaNoVirtual() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
inline const ::SimPlus::Image& Observation::_internal_camera() const {
  const ::SimPlus::Image* p = camera_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SimPlus::Image*>(
      &::SimPlus::_Image_default_instance_);
}
inline const ::SimPlus::Image& Observation::camera() const {
  // @@protoc_insertion_point(field_get:SimPlus.Observation.camera)
  return _internal_camera();
}
inline ::SimPlus::Image* Observation::release_camera() {
  // @@protoc_insertion_point(field_release:SimPlus.Observation.camera)
  
  ::SimPlus::Image* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::SimPlus::Image* Observation::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimPlus::Image>(GetArenaNoVirtual());
    camera_ = p;
  }
  return camera_;
}
inline ::SimPlus::Image* Observation::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Observation.camera)
  return _internal_mutable_camera();
}
inline void Observation::set_allocated_camera(::SimPlus::Image* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Observation.camera)
}

// repeated .SimPlus.Pixel colors = 2;
inline int Observation::_internal_colors_size() const {
  return colors_.size();
}
inline int Observation::colors_size() const {
  return _internal_colors_size();
}
inline void Observation::clear_colors() {
  colors_.Clear();
}
inline ::SimPlus::Pixel* Observation::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:SimPlus.Observation.colors)
  return colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Pixel >*
Observation::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:SimPlus.Observation.colors)
  return &colors_;
}
inline const ::SimPlus::Pixel& Observation::_internal_colors(int index) const {
  return colors_.Get(index);
}
inline const ::SimPlus::Pixel& Observation::colors(int index) const {
  // @@protoc_insertion_point(field_get:SimPlus.Observation.colors)
  return _internal_colors(index);
}
inline ::SimPlus::Pixel* Observation::_internal_add_colors() {
  return colors_.Add();
}
inline ::SimPlus::Pixel* Observation::add_colors() {
  // @@protoc_insertion_point(field_add:SimPlus.Observation.colors)
  return _internal_add_colors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Pixel >&
Observation::colors() const {
  // @@protoc_insertion_point(field_list:SimPlus.Observation.colors)
  return colors_;
}

// repeated .SimPlus.Proximity distances = 3;
inline int Observation::_internal_distances_size() const {
  return distances_.size();
}
inline int Observation::distances_size() const {
  return _internal_distances_size();
}
inline void Observation::clear_distances() {
  distances_.Clear();
}
inline ::SimPlus::Proximity* Observation::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:SimPlus.Observation.distances)
  return distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Proximity >*
Observation::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:SimPlus.Observation.distances)
  return &distances_;
}
inline const ::SimPlus::Proximity& Observation::_internal_distances(int index) const {
  return distances_.Get(index);
}
inline const ::SimPlus::Proximity& Observation::distances(int index) const {
  // @@protoc_insertion_point(field_get:SimPlus.Observation.distances)
  return _internal_distances(index);
}
inline ::SimPlus::Proximity* Observation::_internal_add_distances() {
  return distances_.Add();
}
inline ::SimPlus::Proximity* Observation::add_distances() {
  // @@protoc_insertion_point(field_add:SimPlus.Observation.distances)
  return _internal_add_distances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Proximity >&
Observation::distances() const {
  // @@protoc_insertion_point(field_list:SimPlus.Observation.distances)
  return distances_;
}

// .SimPlus.Position pos = 4;
inline bool Observation::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Observation::has_pos() const {
  return _internal_has_pos();
}
inline void Observation::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::SimPlus::Position& Observation::_internal_pos() const {
  const ::SimPlus::Position* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SimPlus::Position*>(
      &::SimPlus::_Position_default_instance_);
}
inline const ::SimPlus::Position& Observation::pos() const {
  // @@protoc_insertion_point(field_get:SimPlus.Observation.pos)
  return _internal_pos();
}
inline ::SimPlus::Position* Observation::release_pos() {
  // @@protoc_insertion_point(field_release:SimPlus.Observation.pos)
  
  ::SimPlus::Position* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::SimPlus::Position* Observation::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimPlus::Position>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::SimPlus::Position* Observation::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Observation.pos)
  return _internal_mutable_pos();
}
inline void Observation::set_allocated_pos(::SimPlus::Position* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Observation.pos)
}

// -------------------------------------------------------------------

// Proximity

// bool detected = 1;
inline void Proximity::clear_detected() {
  detected_ = false;
}
inline bool Proximity::_internal_detected() const {
  return detected_;
}
inline bool Proximity::detected() const {
  // @@protoc_insertion_point(field_get:SimPlus.Proximity.detected)
  return _internal_detected();
}
inline void Proximity::_internal_set_detected(bool value) {
  
  detected_ = value;
}
inline void Proximity::set_detected(bool value) {
  _internal_set_detected(value);
  // @@protoc_insertion_point(field_set:SimPlus.Proximity.detected)
}

// double distance = 2;
inline void Proximity::clear_distance() {
  distance_ = 0;
}
inline double Proximity::_internal_distance() const {
  return distance_;
}
inline double Proximity::distance() const {
  // @@protoc_insertion_point(field_get:SimPlus.Proximity.distance)
  return _internal_distance();
}
inline void Proximity::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Proximity::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:SimPlus.Proximity.distance)
}

// -------------------------------------------------------------------

// Position

// double x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline double Position::_internal_x() const {
  return x_;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:SimPlus.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Position::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SimPlus.Position.x)
}

// double y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline double Position::_internal_y() const {
  return y_;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:SimPlus.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Position::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SimPlus.Position.y)
}

// double z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline double Position::_internal_z() const {
  return z_;
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:SimPlus.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Position::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SimPlus.Position.z)
}

// double roll = 4;
inline void Position::clear_roll() {
  roll_ = 0;
}
inline double Position::_internal_roll() const {
  return roll_;
}
inline double Position::roll() const {
  // @@protoc_insertion_point(field_get:SimPlus.Position.roll)
  return _internal_roll();
}
inline void Position::_internal_set_roll(double value) {
  
  roll_ = value;
}
inline void Position::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:SimPlus.Position.roll)
}

// double pitch = 5;
inline void Position::clear_pitch() {
  pitch_ = 0;
}
inline double Position::_internal_pitch() const {
  return pitch_;
}
inline double Position::pitch() const {
  // @@protoc_insertion_point(field_get:SimPlus.Position.pitch)
  return _internal_pitch();
}
inline void Position::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void Position::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:SimPlus.Position.pitch)
}

// double yaw = 6;
inline void Position::clear_yaw() {
  yaw_ = 0;
}
inline double Position::_internal_yaw() const {
  return yaw_;
}
inline double Position::yaw() const {
  // @@protoc_insertion_point(field_get:SimPlus.Position.yaw)
  return _internal_yaw();
}
inline void Position::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void Position::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:SimPlus.Position.yaw)
}

// bool gps_enabled = 7;
inline void Position::clear_gps_enabled() {
  gps_enabled_ = false;
}
inline bool Position::_internal_gps_enabled() const {
  return gps_enabled_;
}
inline bool Position::gps_enabled() const {
  // @@protoc_insertion_point(field_get:SimPlus.Position.gps_enabled)
  return _internal_gps_enabled();
}
inline void Position::_internal_set_gps_enabled(bool value) {
  
  gps_enabled_ = value;
}
inline void Position::set_gps_enabled(bool value) {
  _internal_set_gps_enabled(value);
  // @@protoc_insertion_point(field_set:SimPlus.Position.gps_enabled)
}

// -------------------------------------------------------------------

// Commands

// repeated .SimPlus.Command commands = 1;
inline int Commands::_internal_commands_size() const {
  return commands_.size();
}
inline int Commands::commands_size() const {
  return _internal_commands_size();
}
inline void Commands::clear_commands() {
  commands_.Clear();
}
inline ::SimPlus::Command* Commands::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:SimPlus.Commands.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Command >*
Commands::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:SimPlus.Commands.commands)
  return &commands_;
}
inline const ::SimPlus::Command& Commands::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const ::SimPlus::Command& Commands::commands(int index) const {
  // @@protoc_insertion_point(field_get:SimPlus.Commands.commands)
  return _internal_commands(index);
}
inline ::SimPlus::Command* Commands::_internal_add_commands() {
  return commands_.Add();
}
inline ::SimPlus::Command* Commands::add_commands() {
  // @@protoc_insertion_point(field_add:SimPlus.Commands.commands)
  return _internal_add_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Command >&
Commands::commands() const {
  // @@protoc_insertion_point(field_list:SimPlus.Commands.commands)
  return commands_;
}

// -------------------------------------------------------------------

// Command

// int32 id = 1;
inline void Command::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::id() const {
  // @@protoc_insertion_point(field_get:SimPlus.Command.id)
  return _internal_id();
}
inline void Command::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Command::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SimPlus.Command.id)
}

// double linear = 2;
inline void Command::clear_linear() {
  linear_ = 0;
}
inline double Command::_internal_linear() const {
  return linear_;
}
inline double Command::linear() const {
  // @@protoc_insertion_point(field_get:SimPlus.Command.linear)
  return _internal_linear();
}
inline void Command::_internal_set_linear(double value) {
  
  linear_ = value;
}
inline void Command::set_linear(double value) {
  _internal_set_linear(value);
  // @@protoc_insertion_point(field_set:SimPlus.Command.linear)
}

// double angular = 3;
inline void Command::clear_angular() {
  angular_ = 0;
}
inline double Command::_internal_angular() const {
  return angular_;
}
inline double Command::angular() const {
  // @@protoc_insertion_point(field_get:SimPlus.Command.angular)
  return _internal_angular();
}
inline void Command::_internal_set_angular(double value) {
  
  angular_ = value;
}
inline void Command::set_angular(double value) {
  _internal_set_angular(value);
  // @@protoc_insertion_point(field_set:SimPlus.Command.angular)
}

// string LED = 4;
inline void Command::clear_led() {
  led_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::led() const {
  // @@protoc_insertion_point(field_get:SimPlus.Command.LED)
  return _internal_led();
}
inline void Command::set_led(const std::string& value) {
  _internal_set_led(value);
  // @@protoc_insertion_point(field_set:SimPlus.Command.LED)
}
inline std::string* Command::mutable_led() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Command.LED)
  return _internal_mutable_led();
}
inline const std::string& Command::_internal_led() const {
  return led_.GetNoArena();
}
inline void Command::_internal_set_led(const std::string& value) {
  
  led_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_led(std::string&& value) {
  
  led_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SimPlus.Command.LED)
}
inline void Command::set_led(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  led_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimPlus.Command.LED)
}
inline void Command::set_led(const char* value, size_t size) {
  
  led_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimPlus.Command.LED)
}
inline std::string* Command::_internal_mutable_led() {
  
  return led_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_led() {
  // @@protoc_insertion_point(field_release:SimPlus.Command.LED)
  
  return led_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_led(std::string* led) {
  if (led != nullptr) {
    
  } else {
    
  }
  led_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), led);
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Command.LED)
}

// repeated .SimPlus.Action actions = 5;
inline int Command::_internal_actions_size() const {
  return actions_.size();
}
inline int Command::actions_size() const {
  return _internal_actions_size();
}
inline void Command::clear_actions() {
  actions_.Clear();
}
inline ::SimPlus::Action* Command::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:SimPlus.Command.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Action >*
Command::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:SimPlus.Command.actions)
  return &actions_;
}
inline const ::SimPlus::Action& Command::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::SimPlus::Action& Command::actions(int index) const {
  // @@protoc_insertion_point(field_get:SimPlus.Command.actions)
  return _internal_actions(index);
}
inline ::SimPlus::Action* Command::_internal_add_actions() {
  return actions_.Add();
}
inline ::SimPlus::Action* Command::add_actions() {
  // @@protoc_insertion_point(field_add:SimPlus.Command.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimPlus::Action >&
Command::actions() const {
  // @@protoc_insertion_point(field_list:SimPlus.Command.actions)
  return actions_;
}

// -------------------------------------------------------------------

// Ending

// .SimPlus.ServerInfo server = 1;
inline bool Ending::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool Ending::has_server() const {
  return _internal_has_server();
}
inline void Ending::clear_server() {
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::SimPlus::ServerInfo& Ending::_internal_server() const {
  const ::SimPlus::ServerInfo* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SimPlus::ServerInfo*>(
      &::SimPlus::_ServerInfo_default_instance_);
}
inline const ::SimPlus::ServerInfo& Ending::server() const {
  // @@protoc_insertion_point(field_get:SimPlus.Ending.server)
  return _internal_server();
}
inline ::SimPlus::ServerInfo* Ending::release_server() {
  // @@protoc_insertion_point(field_release:SimPlus.Ending.server)
  
  ::SimPlus::ServerInfo* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::SimPlus::ServerInfo* Ending::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimPlus::ServerInfo>(GetArenaNoVirtual());
    server_ = p;
  }
  return server_;
}
inline ::SimPlus::ServerInfo* Ending::mutable_server() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Ending.server)
  return _internal_mutable_server();
}
inline void Ending::set_allocated_server(::SimPlus::ServerInfo* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Ending.server)
}

// -------------------------------------------------------------------

// Result

// .SimPlus.Image map = 1;
inline bool Result::_internal_has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline bool Result::has_map() const {
  return _internal_has_map();
}
inline void Result::clear_map() {
  if (GetArenaNoVirtual() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::SimPlus::Image& Result::_internal_map() const {
  const ::SimPlus::Image* p = map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SimPlus::Image*>(
      &::SimPlus::_Image_default_instance_);
}
inline const ::SimPlus::Image& Result::map() const {
  // @@protoc_insertion_point(field_get:SimPlus.Result.map)
  return _internal_map();
}
inline ::SimPlus::Image* Result::release_map() {
  // @@protoc_insertion_point(field_release:SimPlus.Result.map)
  
  ::SimPlus::Image* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::SimPlus::Image* Result::_internal_mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimPlus::Image>(GetArenaNoVirtual());
    map_ = p;
  }
  return map_;
}
inline ::SimPlus::Image* Result::mutable_map() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Result.map)
  return _internal_mutable_map();
}
inline void Result::set_allocated_map(::SimPlus::Image* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Result.map)
}

// string message = 2;
inline void Result::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Result::message() const {
  // @@protoc_insertion_point(field_get:SimPlus.Result.message)
  return _internal_message();
}
inline void Result::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:SimPlus.Result.message)
}
inline std::string* Result::mutable_message() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Result.message)
  return _internal_mutable_message();
}
inline const std::string& Result::_internal_message() const {
  return message_.GetNoArena();
}
inline void Result::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Result::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SimPlus.Result.message)
}
inline void Result::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimPlus.Result.message)
}
inline void Result::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimPlus.Result.message)
}
inline std::string* Result::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Result::release_message() {
  // @@protoc_insertion_point(field_release:SimPlus.Result.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Result.message)
}

// -------------------------------------------------------------------

// Action

// double x = 1;
inline void Action::clear_x() {
  x_ = 0;
}
inline double Action::_internal_x() const {
  return x_;
}
inline double Action::x() const {
  // @@protoc_insertion_point(field_get:SimPlus.Action.x)
  return _internal_x();
}
inline void Action::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Action::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SimPlus.Action.x)
}

// double y = 2;
inline void Action::clear_y() {
  y_ = 0;
}
inline double Action::_internal_y() const {
  return y_;
}
inline double Action::y() const {
  // @@protoc_insertion_point(field_get:SimPlus.Action.y)
  return _internal_y();
}
inline void Action::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Action::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SimPlus.Action.y)
}

// double z = 3;
inline void Action::clear_z() {
  z_ = 0;
}
inline double Action::_internal_z() const {
  return z_;
}
inline double Action::z() const {
  // @@protoc_insertion_point(field_get:SimPlus.Action.z)
  return _internal_z();
}
inline void Action::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Action::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SimPlus.Action.z)
}

// string type = 4;
inline void Action::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Action::type() const {
  // @@protoc_insertion_point(field_get:SimPlus.Action.type)
  return _internal_type();
}
inline void Action::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SimPlus.Action.type)
}
inline std::string* Action::mutable_type() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Action.type)
  return _internal_mutable_type();
}
inline const std::string& Action::_internal_type() const {
  return type_.GetNoArena();
}
inline void Action::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Action::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SimPlus.Action.type)
}
inline void Action::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimPlus.Action.type)
}
inline void Action::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimPlus.Action.type)
}
inline std::string* Action::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Action::release_type() {
  // @@protoc_insertion_point(field_release:SimPlus.Action.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Action.type)
}

// -------------------------------------------------------------------

// CheckPoint

// string color = 1;
inline void CheckPoint::clear_color() {
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckPoint::color() const {
  // @@protoc_insertion_point(field_get:SimPlus.CheckPoint.color)
  return _internal_color();
}
inline void CheckPoint::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:SimPlus.CheckPoint.color)
}
inline std::string* CheckPoint::mutable_color() {
  // @@protoc_insertion_point(field_mutable:SimPlus.CheckPoint.color)
  return _internal_mutable_color();
}
inline const std::string& CheckPoint::_internal_color() const {
  return color_.GetNoArena();
}
inline void CheckPoint::_internal_set_color(const std::string& value) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CheckPoint::set_color(std::string&& value) {
  
  color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SimPlus.CheckPoint.color)
}
inline void CheckPoint::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimPlus.CheckPoint.color)
}
inline void CheckPoint::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimPlus.CheckPoint.color)
}
inline std::string* CheckPoint::_internal_mutable_color() {
  
  return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckPoint::release_color() {
  // @@protoc_insertion_point(field_release:SimPlus.CheckPoint.color)
  
  return color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckPoint::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:SimPlus.CheckPoint.color)
}

// int32 point = 2;
inline void CheckPoint::clear_point() {
  point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckPoint::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckPoint::point() const {
  // @@protoc_insertion_point(field_get:SimPlus.CheckPoint.point)
  return _internal_point();
}
inline void CheckPoint::_internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  point_ = value;
}
inline void CheckPoint::set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:SimPlus.CheckPoint.point)
}

// -------------------------------------------------------------------

// Pixel

// int32 r = 1;
inline void Pixel::clear_r() {
  r_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pixel::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pixel::r() const {
  // @@protoc_insertion_point(field_get:SimPlus.Pixel.r)
  return _internal_r();
}
inline void Pixel::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  r_ = value;
}
inline void Pixel::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:SimPlus.Pixel.r)
}

// int32 g = 2;
inline void Pixel::clear_g() {
  g_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pixel::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pixel::g() const {
  // @@protoc_insertion_point(field_get:SimPlus.Pixel.g)
  return _internal_g();
}
inline void Pixel::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  g_ = value;
}
inline void Pixel::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:SimPlus.Pixel.g)
}

// int32 b = 3;
inline void Pixel::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pixel::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pixel::b() const {
  // @@protoc_insertion_point(field_get:SimPlus.Pixel.b)
  return _internal_b();
}
inline void Pixel::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void Pixel::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:SimPlus.Pixel.b)
}

// -------------------------------------------------------------------

// Image

// int32 w = 1;
inline void Image::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::w() const {
  // @@protoc_insertion_point(field_get:SimPlus.Image.w)
  return _internal_w();
}
inline void Image::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
}
inline void Image::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:SimPlus.Image.w)
}

// int32 h = 2;
inline void Image::clear_h() {
  h_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::h() const {
  // @@protoc_insertion_point(field_get:SimPlus.Image.h)
  return _internal_h();
}
inline void Image::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  h_ = value;
}
inline void Image::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:SimPlus.Image.h)
}

// bytes raw = 3;
inline void Image::clear_raw() {
  raw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::raw() const {
  // @@protoc_insertion_point(field_get:SimPlus.Image.raw)
  return _internal_raw();
}
inline void Image::set_raw(const std::string& value) {
  _internal_set_raw(value);
  // @@protoc_insertion_point(field_set:SimPlus.Image.raw)
}
inline std::string* Image::mutable_raw() {
  // @@protoc_insertion_point(field_mutable:SimPlus.Image.raw)
  return _internal_mutable_raw();
}
inline const std::string& Image::_internal_raw() const {
  return raw_.GetNoArena();
}
inline void Image::_internal_set_raw(const std::string& value) {
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_raw(std::string&& value) {
  
  raw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SimPlus.Image.raw)
}
inline void Image::set_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimPlus.Image.raw)
}
inline void Image::set_raw(const void* value, size_t size) {
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimPlus.Image.raw)
}
inline std::string* Image::_internal_mutable_raw() {
  
  return raw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_raw() {
  // @@protoc_insertion_point(field_release:SimPlus.Image.raw)
  
  return raw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_raw(std::string* raw) {
  if (raw != nullptr) {
    
  } else {
    
  }
  raw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:SimPlus.Image.raw)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SimPlus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simplus_2eproto
