// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simplus.proto
#ifndef GRPC_simplus_2eproto__INCLUDED
#define GRPC_simplus_2eproto__INCLUDED

#include "simplus.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace SimPlus {

class SimPlus final {
 public:
  static constexpr char const* service_full_name() {
    return "SimPlus.SimPlus";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::SimPlus::TeamInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::TeamInfo>> AsyncStart(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::TeamInfo>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::TeamInfo>> PrepareAsyncStart(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::TeamInfo>>(PrepareAsyncStartRaw(context, request, cq));
    }
    virtual ::grpc::Status Action(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::SimPlus::Commands* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Commands>> AsyncAction(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Commands>>(AsyncActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Commands>> PrepareAsyncAction(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Commands>>(PrepareAsyncActionRaw(context, request, cq));
    }
    virtual ::grpc::Status End(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::SimPlus::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Result>> AsyncEnd(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Result>>(AsyncEndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Result>> PrepareAsyncEnd(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Result>>(PrepareAsyncEndRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo* request, ::SimPlus::TeamInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::TeamInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo* request, ::SimPlus::TeamInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::TeamInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Action(::grpc::ClientContext* context, const ::SimPlus::Observations* request, ::SimPlus::Commands* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Action(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Commands* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Action(::grpc::ClientContext* context, const ::SimPlus::Observations* request, ::SimPlus::Commands* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Action(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Commands* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void End(::grpc::ClientContext* context, const ::SimPlus::Ending* request, ::SimPlus::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void End(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void End(::grpc::ClientContext* context, const ::SimPlus::Ending* request, ::SimPlus::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void End(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::TeamInfo>* AsyncStartRaw(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::TeamInfo>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Commands>* AsyncActionRaw(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Commands>* PrepareAsyncActionRaw(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Result>* AsyncEndRaw(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SimPlus::Result>* PrepareAsyncEndRaw(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::SimPlus::TeamInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::TeamInfo>> AsyncStart(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::TeamInfo>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::TeamInfo>> PrepareAsyncStart(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::TeamInfo>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Action(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::SimPlus::Commands* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::Commands>> AsyncAction(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::Commands>>(AsyncActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::Commands>> PrepareAsyncAction(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::Commands>>(PrepareAsyncActionRaw(context, request, cq));
    }
    ::grpc::Status End(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::SimPlus::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::Result>> AsyncEnd(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::Result>>(AsyncEndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::Result>> PrepareAsyncEnd(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SimPlus::Result>>(PrepareAsyncEndRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo* request, ::SimPlus::TeamInfo* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::TeamInfo* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::SimPlus::WorldInfo* request, ::SimPlus::TeamInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::TeamInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Action(::grpc::ClientContext* context, const ::SimPlus::Observations* request, ::SimPlus::Commands* response, std::function<void(::grpc::Status)>) override;
      void Action(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Commands* response, std::function<void(::grpc::Status)>) override;
      void Action(::grpc::ClientContext* context, const ::SimPlus::Observations* request, ::SimPlus::Commands* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Action(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Commands* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void End(::grpc::ClientContext* context, const ::SimPlus::Ending* request, ::SimPlus::Result* response, std::function<void(::grpc::Status)>) override;
      void End(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Result* response, std::function<void(::grpc::Status)>) override;
      void End(::grpc::ClientContext* context, const ::SimPlus::Ending* request, ::SimPlus::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void End(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimPlus::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::SimPlus::TeamInfo>* AsyncStartRaw(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SimPlus::TeamInfo>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::SimPlus::WorldInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SimPlus::Commands>* AsyncActionRaw(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SimPlus::Commands>* PrepareAsyncActionRaw(::grpc::ClientContext* context, const ::SimPlus::Observations& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SimPlus::Result>* AsyncEndRaw(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SimPlus::Result>* PrepareAsyncEndRaw(::grpc::ClientContext* context, const ::SimPlus::Ending& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_Action_;
    const ::grpc::internal::RpcMethod rpcmethod_End_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::SimPlus::WorldInfo* request, ::SimPlus::TeamInfo* response);
    virtual ::grpc::Status Action(::grpc::ServerContext* context, const ::SimPlus::Observations* request, ::SimPlus::Commands* response);
    virtual ::grpc::Status End(::grpc::ServerContext* context, const ::SimPlus::Ending* request, ::SimPlus::Result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::SimPlus::WorldInfo* /*request*/, ::SimPlus::TeamInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::SimPlus::WorldInfo* request, ::grpc::ServerAsyncResponseWriter< ::SimPlus::TeamInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Action() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::SimPlus::Observations* /*request*/, ::SimPlus::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAction(::grpc::ServerContext* context, ::SimPlus::Observations* request, ::grpc::ServerAsyncResponseWriter< ::SimPlus::Commands>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_End() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status End(::grpc::ServerContext* /*context*/, const ::SimPlus::Ending* /*request*/, ::SimPlus::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnd(::grpc::ServerContext* context, ::SimPlus::Ending* request, ::grpc::ServerAsyncResponseWriter< ::SimPlus::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Start<WithAsyncMethod_Action<WithAsyncMethod_End<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Start() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SimPlus::WorldInfo, ::SimPlus::TeamInfo>(
          [this](::grpc::ServerContext* context,
                 const ::SimPlus::WorldInfo* request,
                 ::SimPlus::TeamInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Start(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Start(
        ::grpc::experimental::MessageAllocator< ::SimPlus::WorldInfo, ::SimPlus::TeamInfo>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SimPlus::WorldInfo, ::SimPlus::TeamInfo>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::SimPlus::WorldInfo* /*request*/, ::SimPlus::TeamInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Start(::grpc::ServerContext* /*context*/, const ::SimPlus::WorldInfo* /*request*/, ::SimPlus::TeamInfo* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Action() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SimPlus::Observations, ::SimPlus::Commands>(
          [this](::grpc::ServerContext* context,
                 const ::SimPlus::Observations* request,
                 ::SimPlus::Commands* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Action(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Action(
        ::grpc::experimental::MessageAllocator< ::SimPlus::Observations, ::SimPlus::Commands>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SimPlus::Observations, ::SimPlus::Commands>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::SimPlus::Observations* /*request*/, ::SimPlus::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Action(::grpc::ServerContext* /*context*/, const ::SimPlus::Observations* /*request*/, ::SimPlus::Commands* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_End() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SimPlus::Ending, ::SimPlus::Result>(
          [this](::grpc::ServerContext* context,
                 const ::SimPlus::Ending* request,
                 ::SimPlus::Result* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->End(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_End(
        ::grpc::experimental::MessageAllocator< ::SimPlus::Ending, ::SimPlus::Result>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SimPlus::Ending, ::SimPlus::Result>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status End(::grpc::ServerContext* /*context*/, const ::SimPlus::Ending* /*request*/, ::SimPlus::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void End(::grpc::ServerContext* /*context*/, const ::SimPlus::Ending* /*request*/, ::SimPlus::Result* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Start<ExperimentalWithCallbackMethod_Action<ExperimentalWithCallbackMethod_End<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::SimPlus::WorldInfo* /*request*/, ::SimPlus::TeamInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Action() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::SimPlus::Observations* /*request*/, ::SimPlus::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_End() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status End(::grpc::ServerContext* /*context*/, const ::SimPlus::Ending* /*request*/, ::SimPlus::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::SimPlus::WorldInfo* /*request*/, ::SimPlus::TeamInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Action() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::SimPlus::Observations* /*request*/, ::SimPlus::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_End() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status End(::grpc::ServerContext* /*context*/, const ::SimPlus::Ending* /*request*/, ::SimPlus::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Start() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Start(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::SimPlus::WorldInfo* /*request*/, ::SimPlus::TeamInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Start(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Action() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Action(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::SimPlus::Observations* /*request*/, ::SimPlus::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Action(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_End() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->End(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status End(::grpc::ServerContext* /*context*/, const ::SimPlus::Ending* /*request*/, ::SimPlus::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void End(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::SimPlus::WorldInfo, ::SimPlus::TeamInfo>(std::bind(&WithStreamedUnaryMethod_Start<BaseClass>::StreamedStart, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::SimPlus::WorldInfo* /*request*/, ::SimPlus::TeamInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SimPlus::WorldInfo,::SimPlus::TeamInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Action() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::SimPlus::Observations, ::SimPlus::Commands>(std::bind(&WithStreamedUnaryMethod_Action<BaseClass>::StreamedAction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::SimPlus::Observations* /*request*/, ::SimPlus::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SimPlus::Observations,::SimPlus::Commands>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_End() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::SimPlus::Ending, ::SimPlus::Result>(std::bind(&WithStreamedUnaryMethod_End<BaseClass>::StreamedEnd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status End(::grpc::ServerContext* /*context*/, const ::SimPlus::Ending* /*request*/, ::SimPlus::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SimPlus::Ending,::SimPlus::Result>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Action<WithStreamedUnaryMethod_End<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Action<WithStreamedUnaryMethod_End<Service > > > StreamedService;
};

}  // namespace SimPlus


#endif  // GRPC_simplus_2eproto__INCLUDED
